(self.webpackChunktech_details=self.webpackChunktech_details||[]).push([[1867],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(f,s(s({ref:n},p),{},{components:t})):o.createElement(f,s({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},39184:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var o=t(22122),r=t(19756),i=(t(67294),t(3905)),s=["components"],a={hide_title:!0,sidebar_label:"Vision Module: Setup & Installation"},l="Vision Sensor: Setup & Installation",c={unversionedId:"systems/Aira/vision_module_setup",id:"systems/Aira/vision_module_setup",isDocsHomePage:!1,title:"Vision Sensor: Setup & Installation",description:"Vision Sensor Details",source:"@site/docs/systems/Aira/vision_module_setup.md",sourceDirName:"systems/Aira",slug:"/systems/Aira/vision_module_setup",permalink:"/tech-details/docs/systems/Aira/vision_module_setup",version:"current",lastUpdatedAt:1750054791,formattedLastUpdatedAt:"6/16/2025",frontMatter:{hide_title:!0,sidebar_label:"Vision Module: Setup & Installation"},sidebar:"systemsSidebar",previous:{title:"On-Board Computer: Setup & Installation",permalink:"/tech-details/docs/systems/Aira/onboard-computer_setup"},next:{title:"MicroXRCE DDS Agent: Setup & Installation",permalink:"/tech-details/docs/systems/Aira/uxrceddsagent_setup"}},p=[{value:"Vision Sensor Details",id:"vision-sensor-details",children:[]},{value:"Network Configuration for Vision Sensors",id:"network-configuration-for-vision-sensors",children:[]},{value:"Setup &amp; Installation",id:"setup--installation",children:[]},{value:"Enabling Time Sync Between OBC &amp; Vision Sensors",id:"enabling-time-sync-between-obc--vision-sensors",children:[]},{value:"Creating Service for Time Sync",id:"creating-service-for-time-sync",children:[]},{value:"Updating Vision Sensors",id:"updating-vision-sensors",children:[]},{value:"Reference Links",id:"reference-links",children:[]}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"vision-sensor-setup--installation"},"Vision Sensor: Setup & Installation"),(0,i.kt)("h2",{id:"vision-sensor-details"},"Vision Sensor Details"),(0,i.kt)("p",null,"Front Vision Sensor : VK180Pro"),(0,i.kt)("p",null,"Rear Vision Sensor  : VK180"),(0,i.kt)("h2",{id:"network-configuration-for-vision-sensors"},"Network Configuration for Vision Sensors"),(0,i.kt)("p",null,"On OBC, delete whatever ethernet network connections are available"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nmcli connection show\nsudo nmcli connection delete <connection-name>\n")),(0,i.kt)("p",null,"Setup network connection for the vision modules:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nmcli connection add type ethernet ifname enP1p1s0 con-name visionmoudle\nsudo nmcli connection modify visionmodule ipv4.method shared ipv4.routes 239.0.0.0/24 ipv4.route-metric 1\nsudo nmcli connection up visionmoudle\n\n\nsudo systemctl restart NetworkManager\n\nnmcli connection show #check the active network connection and ensure visionmodule is active\n")),(0,i.kt)("h2",{id:"setup--installation"},"Setup & Installation"),(0,i.kt)("p",null,"To install required packages to integrate the vision sensors with the on-board computer, follow the steps below,"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://docs.vilota.ai/s/dp180p-product-guide/doc/vk-system-installation-guide-GG408GGuTj"},"VK System Installation Guide")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://docs.vilota.ai/s/dp180p-product-guide/doc/dp180-ip-network-configuration-1y1YvvDrlY"},"VK180 IP Network configuration"))),(0,i.kt)("h2",{id:"enabling-time-sync-between-obc--vision-sensors"},"Enabling Time Sync Between OBC & Vision Sensors"),(0,i.kt)("p",null,"Download the Precision Time Protocol(PTP) package on the OBC"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install linuxptp\n")),(0,i.kt)("p",null,"Download the ptp4_software_master.conf file"),(0,i.kt)("p",null,"Run the following on the host computer (e.g., Jetson Orin) for starting time synchronizer and verify its working"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ptp4l \u20132 \u2013i <dev> -S \u2013m \u2013step_threshold=1 \u2013f ~/path/to/ptp4l_software_master.conf\n\n#<dev> = Network interface name, if you have configured the network as provided above, then <dev> should be replaced with enP1p1s0\n\nsudo ptp4l \u20132 \u2013i enP1p1s0 -S \u2013m \u2013step_threshold=1 \u2013f ~/path/to/ptp4l_software_master.conf\n")),(0,i.kt)("h2",{id:"creating-service-for-time-sync"},"Creating Service for Time Sync"),(0,i.kt)("p",null,"To automate and start the ptp time synchronizer on boot for the vision sensors, follow the below steps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo vim /etc/systemd/system/vision_timesync.service\n")),(0,i.kt)("p",null,"Copy and paste the following into file and save the file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[Unit]\nDescription= PTP4L based Time Sync Service for Vilota Vision Modules\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=/usr/sbin/ptp4l -2 \u2013i enP1p1s0 \u2013S \u2013m \u2013step_threshold=1 \u2013f /home/nvidia/Downloads/vilota/ptp4l_software_master.conf\nRestart=on-failure\nUser=root\n\n[Install]\nWantedBy=multi-user.target\n")),(0,i.kt)("p",null,"Reload the daemon and enable the vision_timesync.service "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reexec\nsudo systemctl daemon-reload\nsudo systemctl enable vision_timesync.service\n\nsudo systemctl start vision_timesync.service\nsudo systemctl status vision_timesync.service #to check the status of the time synchronizer for the vision modules\n")),(0,i.kt)("p",null,"To restart the vision_timesync.service if needed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart vision_timesync.service\n")),(0,i.kt)("h2",{id:"updating-vision-sensors"},"Updating Vision Sensors"),(0,i.kt)("p",null,"Connect the vision sensor to the host PC and open its WebUI on any browser: ",(0,i.kt)("inlineCode",{parentName:"p"},"10.42.0.64 #For VK180Pro Sensor(Master)")," ",(0,i.kt)("inlineCode",{parentName:"p"},"10.42.0.65 #For VK180 Sensor(Slave)")," and also SSH into the vision sensor using a terminal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#For Master vision sensor\nssh compulab@10.42.0.64\n\n#For Slave vision sensor\nssh compulab@10.42.0.65\n")),(0,i.kt)("p",null,"On WebUI under Home section, check the DP Modules checkbox and click Update"),(0,i.kt)("p",null,"After updating the vision sensor using WebUI, inside the sensor, modify the settings.yaml file as below,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo vim /var/lib/vilota/vk_manager/settings.yaml \n \n#For VK180Pro (Master), \nnetwork: \n    managed: true \n    identifier: 1 \n\n#For VK180 (Slave), \nnetwork:\n    managed: true \n    identifier: 2 \n")),(0,i.kt)("p",null,"After modifying the settings.yaml file, do `sudo systemctl restart vk-manager-server.service'"),(0,i.kt)("p",null,"Reboot the sensor"),(0,i.kt)("p",null,"Modify the sensor configuration on the WebUI under Modules as below,"),(0,i.kt)("p",null,"For VK180Pro (Master), "),(0,i.kt)("p",null,"Time Synchronizer "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Start-on-boot   : Yes \nRole            : BoundarySoftware \n")),(0,i.kt)("p",null,"Camera Driver 0 "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Start-on-boot       : Yes  \nTime-synchronized   : Yes \nStart Configuration : vk180-pro_light_rectified.json \n")),(0,i.kt)("p",null,"VIO 0 "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Start-on-boot       : Yes \nStart Configuration : vk180-pro_moderate_rectified.json \n")),(0,i.kt)("p",null,"For VK180 (Slave),"),(0,i.kt)("p",null,"Time Synchronizer "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Start-on-boo    : Yes \nRole            : SlaveSoftware \n")),(0,i.kt)("p",null,"Camera Driver 0 "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Start-on-boot       : Yes \nTime-synchronized   : Yes \nStart Configuration : vk180_light_rectified.json \n")),(0,i.kt)("p",null,"VIO 0 "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Start-on-boot       : Yes \nStart Configuration : vk180_moderate_rectified.json \n")),(0,i.kt)("h2",{id:"reference-links"},"Reference Links"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://docs.vilota.ai/s/dp180p-product-guide/doc/dp180-ip-product-guide-CJMUAK7txH"},"VK180 Product Guide"))))}d.isMDXComponent=!0}}]);